// clustered_file_loader.cpp
#include <stddef.h>
#include <stdint.h>
#include <string.h>
#include <errno.h>
#include <stdint.h>
#include <assert.h>
#include "clustered_file_loader.ch"

int h_tdoa_table[Q*NCOMBMICS];
char4 h_tdoa_table_char4[POWER_SIZE*(NCOMBMICS/4)];
float h_SRP[Q];
int h_sphCoords[Q*3];
float h_TOA_table[Q*M];

int load_clustered_file_TD(void) {
  size_t n;
  FILE *fp= fopen("./TDOA_table.bin","rb"); 
  assert(fp!=NULL);
  assert((NCOMBMICS%4)==0);
  int tab_idx=0;
  int tab_ch4_idx=0;
  for (int i=0; i<Q; ++i) {
    int32_t tdoa[NCOMBMICS];
    int32_t tdoa_char4[4];
    int32_t tdoa_char4_idx=0;
    n= fread(tdoa,sizeof(int32_t),NCOMBMICS,fp);
    assert(n==NCOMBMICS);
    for (int32_t j=0; j<NCOMBMICS; ++j) {
      tdoa_char4[tdoa_char4_idx++]= tdoa[j] + MAX_SD;
      if (tdoa_char4_idx>=4) {
        tdoa_char4_idx=0;
        h_tdoa_table_char4[tab_ch4_idx].x= tdoa_char4[0];
        h_tdoa_table_char4[tab_ch4_idx].y= tdoa_char4[1];
        h_tdoa_table_char4[tab_ch4_idx].z= tdoa_char4[2];
        h_tdoa_table_char4[tab_ch4_idx].w= tdoa_char4[3];
        ++tab_ch4_idx;
      }
      h_tdoa_table[tab_idx++]= tdoa[j] + MAX_SD;
    }
	}
	fclose(fp);
	return 1;
}


int load_clustered_file_FD(void) {
  int n;
  FILE *fp;

  fp= fopen("./TOA_table.bin","rb");
  assert(fp!=NULL);
  n= fread(h_TOA_table,sizeof(float),Q*M,fp);
  assert(n==Q*M);
  fclose(fp);

  fp= fopen("./sphCoords.bin","rb");
  assert(fp!=NULL);
  n= fread(h_sphCoords,sizeof(int),Q*3,fp);
  assert(n==Q*3);
  fclose(fp);

  return 1; 
}

